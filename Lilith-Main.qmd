---
title: "LilithMain"
author: "Lilith Appel"
format: html
editor: visual
---
```{r}
library(tidyverse)
library(scales)
library(broom)
library(dagitty)
library(dplyr)
library(ggrepel)
library(usmap)
library(ggplot2)
library(sf)
library(gridExtra)
library(ggrepel)
library(EValue)
```

```{r}
#loading in my data
State_Data <- read.csv("Data/Capstone_State_Data.csv")
Race_Data <- read.csv("Data/Capstone_Race.csv")
sim_chains_collizi <- readRDS("/Users/aidanappel/Desktop/Fall_2024/Casual/Final Project/Simulations/sim_chains_collizi.rds")
y1_state_sim <- readRDS("/Users/aidanappel/Desktop/Fall_2024/Casual/Final Project/Simulations/zung_chain_state.rds")
y1_starting_hrt_sim <- readRDS("/Users/aidanappel/Desktop/Fall_2024/Casual/Final Project/Simulations/zung_chain.rds")
```

```{r}
Collizi_df <- as.data.frame(sim_chains_collizi)
state_sim_df <- as.data.frame(y1_state_sim)
hrt_df <- as.data.frame(y1_starting_hrt_sim)
```

```{r}
Collizi_hrt_df <- data.frame(
  value = c(Collizi_df, hrt_df),
  group = rep(c("Chain Zung", "Other Chain"), each = length(chain_zung))
)
```

```{r}
State_Data <- State_Data %>%
  filter(State != "Total")
```

```{r}
State_Data$Percent.of.Survey <- gsub("[ ,$%]", "", State_Data$Percent.of.Survey)
State_Data$Percent.of.Survey <- as.numeric(State_Data$Percent.of.Survey) /100
```

```{r}
# Define the age groups, counts, and overall percentages
age_groups <- list(
  "18-24" = list(count = 11840, range = c(18, 24), percent = 43),
  "25-44" = list(count = 10987, range = c(25, 44), percent = 40),
  "45-64" = list(count = 4085, range = c(45, 64), percent = 15),
  "65+" = list(count = 803, range = c(65, 90), percent = 3)
)

# Create an empty data frame to store unique ages and their percentages
df <- data.frame(Age = integer(), Percent = numeric())

# Populate the data frame with unique ages and evenly distributed percentages for each age group
for (group in names(age_groups)) {
  group_info <- age_groups[[group]]
  
  # Calculate the number of ages in this range
  age_range <- seq(group_info$range[1], group_info$range[2])
  num_ages_in_range <- length(age_range)
  
  # Distribute the group's percentage evenly across each age in the range
  percent_per_age <- group_info$percent / num_ages_in_range
  
  # Create a data frame for the unique ages in this group with equal percentage
  group_df <- data.frame(Age = age_range, Percent = rep(percent_per_age, num_ages_in_range))
  
  # Append to the main data frame
  df <- rbind(df, group_df)
}

# Display the resulting data frame
age_df <-df
```

```{r}
# Define the age groups, counts, and overall percentages
income_groups <- list(
  "Under 10000" = list(count = 11840, range = c(0, 10000), percent = 16.2),
  "10000-20000" = list(count = 10987, range = c(10000, 20000), percent = 13.8),
  "20000-30000" = list(count = 4085, range = c(20000, 30000), percent = 11),
  "30000-40000+" = list(count = 803, range = c(30000, 40000), percent = 10.2),
    "40000-60000+" = list(count = 803, range = c(40000, 60000), percent = 14.5),
    "60000-100000+" = list(count = 803, range = c(60000, 100000), percent = 17.5),
    "100000++" = list(count = 803, range = c(100000, 1000000), percent = 16.7)
)

# Create an empty data frame to store unique ages and their percentages
df <- data.frame(Income = integer(), Percent = numeric())

# Populate the data frame with unique ages and evenly distributed percentages for each age group
for (group in names(income_groups)) {
  group_info <- income_groups[[group]]
  
  # Calculate the number of ages in this range
  income_range <- seq(group_info$range[1], group_info$range[2])
  num_income_in_range <- length(income_range)
  
  # Distribute the group's percentage evenly across each age in the range
  percent_per_income <- group_info$percent / num_income_in_range
  
  # Create a data frame for the unique ages in this group with equal percentage
  group_df <- data.frame(Income = income_range, Percent = rep(percent_per_income, num_income_in_range))
  
  # Append to the main data frame
  df <- rbind(df, group_df)
}

# Display the resulting data frame
income_df <-df
```

```{r}
set.seed(451)
n <- 100000
sim_data_Collizi_Expanded <- tibble(
  gender = rbinom(n, size = 1, prob = 0.462532),
  prior_mental_health = rbinom(n,size =1, prob = 0.31),
  starting_mental_health = rnorm(n,mean=48.4,sd=10.5),
  baseline_Zung = rescale(
    pmin(pmax(starting_mental_health, 20), 80),  # Limit range to [20, 80]
    to = c(20, 80)
  ),
  baseline_SCL = rescale(pmin(pmax((starting_mental_health-48.4)/12 + 0.73,0),4),
                         to = c(0,4)),
    state = sample(State_Data$State, n, replace = TRUE, prob = State_Data$Percent.of.Survey),
  income = sample(income_df$Income, n, replace = TRUE, prob = income_df$Percent) + 1,
  race = sample(Race_Data$Race, n, replace = TRUE, prob = Race_Data$Percent),
  food_stamps = rbinom(n,size = 1, prob = 0.09),
  hrt_noise  = rnorm(n,mean = 0.1, sd = 0.1),
  p_starting_hrt = rescale(case_when(
    state %in% c("CA", "OR", "WA", "MN", "CO", "NM", "IL", "NY", "VT", "DC", "ME", "MD", "CT", "MA", "RI") ~ 1,
    state == "NJ" ~ 0.9,
    state %in% c("AZ", "WI", "MI", "NV", "VA", "AK", "PA", "DE") ~ 0.85,
    state %in% c("IA", "GA", "MT", "ND", "NH", "KS", "HI") ~ 0.7,
    state %in% c("WY", "SD", "AL", "IN", "OK") ~ 0.6,
    state %in% c("UT", "LA") ~ 0.5,
    state %in% c("KY", "TN") ~ 0.4,
    state %in% c("ID", "NE", "MO", "TX","AR", "MS") ~ 0.2,
    state %in% c("SC", "FL", "NC", "OH", "WV") ~ 0.1,
  ) + hrt_noise + log(income) * 0.01 , to = c(0.1, 1)),
  starting_hrt = rbinom(n,size =1, prob = p_starting_hrt),
  y1_mental_health = starting_mental_health* (1 - starting_hrt/5.6),
  y1_Zung_noise = rnorm(n,mean=0,sd=6.5),
  y1_Zung = rescale(
    pmin(pmax(baseline_Zung * (y1_mental_health/starting_mental_health) + y1_Zung_noise, 20), 80),
    to = c(20, 80)
  ),
  y1_SCL_noise = rnorm(n,mean=0,sd=0.25),
  y1_SCL = rescale(pmin(pmax(baseline_SCL * y1_mental_health/(starting_mental_health*1.33) +y1_SCL_noise,0),4),to = c(0,4))
  )
```

```{r}
set.seed(451)
n <- 17188
sim_data_Collizi_CI <- tibble(
  gender = rbinom(n, size = 1, prob = 0.462532),
  prior_mental_health = rbinom(n,size =1, prob = 0.31),
  starting_mental_health = rnorm(n,mean=48.4,sd=10.5),
  baseline_Zung = rescale(
    pmin(pmax(starting_mental_health, 20), 80),  # Limit range to [20, 80]
    to = c(20, 80)
  ),
  baseline_SCL = rescale(pmin(pmax((starting_mental_health-48.4)/12 + 0.73,0),4),
                         to = c(0,4)),
    state = sample(State_Data$State, n, replace = TRUE, prob = State_Data$Percent.of.Survey),
  income = sample(income_df$Income, n, replace = TRUE, prob = income_df$Percent) + 1,
  race = sample(Race_Data$Race, n, replace = TRUE, prob = Race_Data$Percent),
  food_stamps = rbinom(n,size = 1, prob = 0.09),
  hrt_noise  = rnorm(n,mean = 0.1, sd = 0.1),
  p_starting_hrt = rescale(case_when(
    state %in% c("CA", "OR", "WA", "MN", "CO", "NM", "IL", "NY", "VT", "DC", "ME", "MD", "CT", "MA", "RI") ~ 1,
    state == "NJ" ~ 0.9,
    state %in% c("AZ", "WI", "MI", "NV", "VA", "AK", "PA", "DE") ~ 0.85,
    state %in% c("IA", "GA", "MT", "ND", "NH", "KS", "HI") ~ 0.7,
    state %in% c("WY", "SD", "AL", "IN", "OK") ~ 0.6,
    state %in% c("UT", "LA") ~ 0.5,
    state %in% c("KY", "TN") ~ 0.4,
    state %in% c("ID", "NE", "MO", "TX","AR", "MS") ~ 0.2,
    state %in% c("SC", "FL", "NC", "OH", "WV") ~ 0.1,
  ) + hrt_noise + log(income) * 0.01 , to = c(0.1, 1)),
  starting_hrt = rbinom(n,size =1, prob = p_starting_hrt),
  y1_mental_health = starting_mental_health* (1 - starting_hrt/5.6),
  y1_Zung_noise = rnorm(n,mean=0,sd=6.5),
  y1_Zung = rescale(
    pmin(pmax(baseline_Zung * (y1_mental_health/starting_mental_health) + y1_Zung_noise, 20), 80),
    to = c(20, 80)
  ),
  y1_SCL_noise = rnorm(n,mean=0,sd=0.25),
  y1_SCL = rescale(pmin(pmax(baseline_SCL * y1_mental_health/(starting_mental_health*1.33) +y1_SCL_noise,0),4),to = c(0,4))
  )
```


```{r}
sim_data_Collizi_Expanded$y1_Zung_cat <- cut(
  sim_data_Collizi_Expanded$y1_Zung,
  breaks = c(20, 45, 59, 69, Inf),  
  labels = c("No-Depression", "Mildly Depressed", "Moderately Depressed", "Severely Depressed"),  # Assign categories
  right = TRUE  # Include upper bound in each range
)

```
```{r}
state_avg_zung <- sim_data_Collizi_Expanded %>%
  group_by(state) %>%
  summarize(average_y1_Zung = mean(y1_Zung, na.rm = TRUE))
```

```{r}
state_avg_p_hrt <- sim_data_Collizi_Expanded %>%
  group_by(state) %>%
  summarize(average_p_hrt = mean(p_starting_hrt, na.rm = TRUE))
```

```{r}
state_zung_p_hrt <- state_avg_zung %>%
  left_join(state_avg_p_hrt)
```
```{r}
ggplot(y1_zung_dataframe, aes(x=chain_zung)) +
  geom_histogram()
```

```{r}
hrt_true_y1_zung <- ggplot(sim_data_Collizi_Expanded_true, aes(x=y1_Zung)) +
  geom_density()
```
.
```{r}
table(sim_data_Collizi_Expanded$y1_Zung_cat)
```

```{r}
addmargins(table(sim_data_Collizi_Expanded_true$y1_Zung_cat))
```

```{r}
addmargins(table(sim_data_Collizi_Expanded_false$y1_Zung_cat))
```

```{r}
density_plot <- ggplot(sim_data_Collizi_Expanded, aes(x = y1_Zung, color = as.factor(starting_hrt), group = starting_hrt)) +
  geom_density(size = 1.2) +  # Thicker density lines
  labs(title = "Density Plot for HRT Groups",
       x = "Year One Zung Score",
       y = "Density",
       color = "HRT Status") +  # Legend title
  theme_minimal(base_size = 6.5)+  # Adjust the overall base size
   theme(
    plot.title = element_text(size = 20, face = "bold"), # Title size and style
    axis.title.x = element_text(size = 16),             # X-axis label size
    axis.title.y = element_text(size = 16),             # Y-axis label size
    axis.text = element_text(size = 14),                # Axis tick label size
    legend.title = element_text(size = 16),             # Legend title size
    legend.text = element_text(size = 14)               # Legend text size
  )
density_plot
```


```{r}
plot_usmap(data = state_zung_p_hrt, size = "average_p_hrt", values = "average_y1_Zung", region = "state") + 
  labs(title = "Average Zung Score by State",
       subtitle = "White is a color score, while red is higher") + 
    scale_fill_continuous(low = "white", high = "red", name = "average_y1_Zung", label = scales::comma) +
  theme(panel.background=element_blank()) +  
  theme(plot.title = element_text(size = 20))
```

```{r}
state_score_rank <- state_zung_p_hrt %>%
  ggplot() +
  geom_point(aes(x = average_p_hrt, y = average_y1_Zung)) +
  geom_label_repel(aes(x = average_p_hrt, y = average_y1_Zung, label = state), size = 3) +
  xlab("Probability of Getting HRT") +
  ylab("Average Year One Zung Score") +
  ggtitle("States With Average Zung Score and Probability of HRT") +
  theme_classic() +
  geom_hline(yintercept = quantile(state_zung_p_hrt$average_y1_Zung, 0.5), linetype = "dashed", color = "red") +
  geom_vline(xintercept = quantile(state_zung_p_hrt$average_p_hrt, 0.5), linetype = "dashed", color = "red") +
  labs(size = "Size Scaled by Area") + theme_minimal(base_size = 6.5)+  # Adjust the overall base size
  theme(axis.title.x = element_text(size = 20),  # Adjust x-axis label size
        axis.title.y = element_text(size = 20),
        plot.title = element_text(size = 20)) 

# Adjust the size
state_score_rank
```

```{r}
ggplot(Collizi_df, aes(x=chain_zung)) +
  geom_histogram()
```


```{r}
ggplot(hrt_df, aes(x=chain_zung)) +
  geom_histogram()
```

```{r}
# Example: Plot histograms from two separate datasets
ggplot() + 
  geom_histogram(data = Collizi_df, aes(x = chain_zung, fill = "Collizi_chains"),
                 alpha = 0.5, bins = 50, color = "black") + 
  geom_histogram(data = hrt_df, aes(x = chain_zung, fill = "USA_chains"),
                 alpha = 0.5, bins = 50) + 
  scale_fill_manual(values = c("Collizi_chains" = "blue", "USA_chains" = "red")) + 
  labs(
    title = "Overlaid Histogram of Collizi and USA simulations",
    x = "Zung Change Value",
    y = "Frequency",
    fill = "Group"
  ) + 
  theme_minimal() + 
  theme(
    plot.title = element_text(size = 20, face = "bold"), # Title size and style
    axis.title.x = element_text(size = 25),             # X-axis label size
    axis.title.y = element_text(size = 25),             # Y-axis label size
    axis.text = element_text(size = 16),                # Axis tick label size
    legend.title = element_text(size = 16),             # Legend title size
    legend.text = element_text(size = 20)               # Legend text size
  )

```
```{r}
mod_ci <- lm(y1_Zung ~ p_starting_hrt + baseline_Zung + income, data =sim_data_Collizi_CI)
```

```{r}
summary(mod_ci)
confint(mod_ci, parm = "p_starting_hrt", level = 0.95)
```
```{r}
evalues.RR(est = 8.132, lo = 7.54416, hi = 8.719034)
```

