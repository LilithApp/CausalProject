---
title: "Capstone first pass"
author: "Lilith Appel"
format: 
  html:
    embed-resources: true
---

## 

```{r}
library(tidyverse)
library(scales)
library(broom)
library(dagitty)
library(dplyr)
library(ggrepel)
```

```{r}
#loading in my data
State_Data <- read.csv("Data/Capstone_State_Data.csv")
Race_Data <- read.csv("Data/Capstone_Race.csv")
```

#TransWoman -> 9238
#TransMen -> 7950 
#Mental Condition = 31%
```{r}
head(State_Data)
State_Data <- State_Data %>%
  filter(State != "Total")
```

```{r}
State_Data$Percent.of.Survey <- gsub("[ ,$%]", "", State_Data$Percent.of.Survey)
State_Data$Percent.of.Survey <- as.numeric(State_Data$Percent.of.Survey) /100
```

```{r}
sum(State_Data$Percent.of.Survey)
```
```{r}
State_Cat <- State_Data %>%
  group_by(State.Ranking.0.4.) %>%
  summarize(total_survey_percent = sum(Percent.of.Survey, na.rm = TRUE))
```

```{r}
synthetic_states <- sample(State_Data$State, 1000, replace = TRUE, prob = State_Data$Percent.of.Survey)
```

```{r}
head(synthetic_states)
# Check distribution
state_distribution <- table(synthetic_states) / 1000

# Print the distribution
print(state_distribution)
```
```{r}
head(Race_Data)
race_dist <- sample(Race_Data$Race, 1000, replace = TRUE, prob = Race_Data$Percent)
race_dist <- table(race_dist) / 1000

# Print the distribution
print(race_dist)
```
```{r}
# Define the age groups, counts, and overall percentages
age_groups <- list(
  "18-24" = list(count = 11840, range = c(18, 24), percent = 43),
  "25-44" = list(count = 10987, range = c(25, 44), percent = 40),
  "45-64" = list(count = 4085, range = c(45, 64), percent = 15),
  "65+" = list(count = 803, range = c(65, 90), percent = 3)
)

# Create an empty data frame to store unique ages and their percentages
df <- data.frame(Age = integer(), Percent = numeric())

# Populate the data frame with unique ages and evenly distributed percentages for each age group
for (group in names(age_groups)) {
  group_info <- age_groups[[group]]
  
  # Calculate the number of ages in this range
  age_range <- seq(group_info$range[1], group_info$range[2])
  num_ages_in_range <- length(age_range)
  
  # Distribute the group's percentage evenly across each age in the range
  percent_per_age <- group_info$percent / num_ages_in_range
  
  # Create a data frame for the unique ages in this group with equal percentage
  group_df <- data.frame(Age = age_range, Percent = rep(percent_per_age, num_ages_in_range))
  
  # Append to the main data frame
  df <- rbind(df, group_df)
}

# Display the resulting data frame
age_df <-df
print(age_df)

```
```{r}
state = sample(State_Data$State, 100, replace = TRUE, prob = State_Data$Percent.of.Survey)
print(state)
```


```{r}
set.seed(451)
n <- 1000
sim_data_one <- tibble(
  gender = rbinom(n, size = 1, prob = 0.462532),
  prior_mental_health = rbinom(n,size =1, prob = 0.31),
  state = sample(State_Data$State, n, replace = TRUE, prob = State_Data$Percent.of.Survey),
  age = sample(age_df$Age, n, replace = TRUE, prob = age_df$Percent),
  race = sample(Race_Data$Race, n, replace = TRUE, prob = Race_Data$Percent),
  food_stamps = rbinom(n,size = 1, prob = 0.09),
  hrt_noise  = rnorm(n,mean = 0.1, sd = 0.1),
  p_starting_hrt = rescale(case_when(
    state %in% c("CA", "OR", "WA", "MN", "CO", "NM", "IL", "NY", "VT", "DC", "ME", "MD", "CT", "MA", "RI") ~ 1,
    state == "NJ" ~ 0.9,
    state %in% c("AZ", "WI", "MI", "NV", "VA", "AK", "PA", "DE") ~ 0.85,
    state %in% c("IA", "GA", "MT", "ND", "NH", "KS", "HI") ~ 0.7,
    state %in% c("WY", "SD", "AL", "IN", "OK") ~ 0.6,
    state %in% c("UT", "LA") ~ 0.5,
    state %in% c("KY", "TN") ~ 0.4,
    state %in% c("ID", "NE", "MO", "TX","AR", "MS") ~ 0.2,
    state %in% c("SC", "FL", "NC", "OH", "WV") ~ 0.1,
  ) + hrt_noise - food_stamps * 0.1, to = c(0.2, 1)),
  starting_hrt = rbinom(n,size =1, prob = p_starting_hrt),
  time_var = runif(n,min=0.01 * starting_hrt,max= (age - 13)*starting_hrt),
  current_mental_health_noise = rnorm(n,mean=-1,sd=0.5),
 p_current_mental_health = 1 / (1 + exp(-(current_mental_health_noise - starting_hrt * 0.1 * (time_var/2) + prior_mental_health * 3))),
  mental_health_y1 = rbinom(n, size =1, prob= p_current_mental_health),
p_mental_health_y2 = 1 / (1 + exp(-(current_mental_health_noise - starting_hrt * 0.15 * (time_var/2 + 1) + mental_health_y1 * 2))),
mental_health_y2 = rbinom(n,size=1,prob=p_mental_health_y2))

```

```{r}
head(sim_data_one)
```
```{r}
ggplot(sim_data_one, aes(x = starting_hrt, fill = factor(mental_health_y1))) + 
  geom_bar()
```
```{r}
ggplot(sim_data_one, aes(x = starting_hrt, fill = factor(mental_health_y2))) + 
  geom_bar()
```

```{r}
ggplot(sim_data_one, aes(x = state, fill = factor(starting_hrt))) + 
  geom_bar()
```

```{r}
ggplot(sim_data_one, aes(x=time_var, y = p_mental_health_y2))+
  geom_point() +
  geom_smooth()
```
```{r}
ggplot(sim_data_one, aes(x = mental_health_y1, fill = factor(mental_health_y2))) + 
  geom_bar()
```

```{r}
simulate_chain <- function() {
  n <- 17188 #num of patients in orig survey
  
  # Generate simulated data
  sim_data_here <- tibble(
  gender = rbinom(n, size = 1, prob = 0.462532),
  prior_mental_health = rbinom(n,size =1, prob = 0.31),
  state = sample(State_Data$State, n, replace = TRUE, prob = State_Data$Percent.of.Survey),
  age = sample(age_df$Age, n, replace = TRUE, prob = age_df$Percent),
  race = sample(Race_Data$Race, n, replace = TRUE, prob = Race_Data$Percent),
  food_stamps = rbinom(n,size = 1, prob = 0.09),
  hrt_noise  = rnorm(n,mean = 0.1, sd = 0.1),
  p_starting_hrt = rescale(case_when(
    state %in% c("CA", "OR", "WA", "MN", "CO", "NM", "IL", "NY", "VT", "DC", "ME", "MD", "CT", "MA", "RI") ~ 1,
    state == "NJ" ~ 0.9,
    state %in% c("AZ", "WI", "MI", "NV", "VA", "AK", "PA", "DE") ~ 0.85,
    state %in% c("IA", "GA", "MT", "ND", "NH", "KS", "HI") ~ 0.7,
    state %in% c("WY", "SD", "AL", "IN", "OK") ~ 0.6,
    state %in% c("UT", "LA") ~ 0.5,
    state %in% c("KY", "TN") ~ 0.4,
    state %in% c("ID", "NE", "MO", "TX","AR", "MS") ~ 0.2,
    state %in% c("SC", "FL", "NC", "OH", "WV") ~ 0.1,
  ) + hrt_noise - food_stamps * 0.1, to = c(0.2, 1)),
  starting_hrt = rbinom(n,size =1, prob = p_starting_hrt),
  time_var = runif(n,min=0.01 * starting_hrt,max= (age - 13)*starting_hrt),
  current_mental_health_noise = rnorm(n,mean=-1,sd=0.5),
 p_current_mental_health = 1 / (1 + exp(-(current_mental_health_noise - starting_hrt * 0.08 * (time_var/4) + prior_mental_health * 3))),
  mental_health_y1 = rbinom(n, size =1, prob= p_current_mental_health),
p_mental_health_y2 = 1 / (1 + exp(-(current_mental_health_noise - starting_hrt * 0.15 * (time_var/2 + 1) + mental_health_y1 * 2))),
mental_health_y2 = rbinom(n,size=1,prob=p_mental_health_y2))

  
  # Fit a logistic regression model
  mod <- glm(mental_health_y1 ~ prior_mental_health + state + starting_hrt, data = sim_data_here, family = "binomial")
  
  # Extract p-values for all levels of starting-hrt
  tidy(mod) %>%
    filter(grepl("starting_hrt", term)) %>%
    pull(p.value)
}

# Run the simulation 1000 times and collect all p-values
set.seed(451)
system.time({
  chain_pvals <- replicate(1000, simulate_chain(), simplify = FALSE)
})

# Flatten the list of p-values and filter for those less than 0.05
chain_pvals <- unlist(chain_pvals)
table(chain_pvals < 0.05)
```



